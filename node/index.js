const fs = require('fs')
const uuid = require('uuid');
const crypto = require('crypto');
const { JWK, JWT } = require('jose')
const now = () => Math.round(Date.now() / 1000);

// Read your keys generated by openssl
const publicKeyContent = fs.readFileSync("../keys/public.pem")
const privateKeyContent = fs.readFileSync("../keys/private.pem")
const jwkParams = {
  kid: crypto.createHash('sha256').update(publicKeyContent).digest('hex'),
  alg: 'RS256',
  typ: 'sig'
}
const publicKey = JWK.asKey(publicKeyContent, jwkParams)
const privateKey = JWK.asKey(privateKeyContent, jwkParams)

// Create a sample JWT signed with your private key.
const jwtPayload = {
  jti: uuid.v4(),                 // Unique token identifier
  aud: "https://sso.sandbox.karhoo.com/oauth/v2/token-exchange", // Audience
  iss: "your-app-id",             // Client ID the SDK was initialized with
  sub: "eccdfcf4b",               // The unique identifier of your user
  iat: now(),                     // A timestamp when the token was issued
  exp: now() + 30*60,             // A timestamp when the token expires
  given_name: "John",             // First name
  family_name: "Doe",             // Last name
  email: "john.doe@example.com",  // Verified email
  phone_number: "+15005550006",   // Verified phone number in E.164 format
  locale: "en"   			            // End-User's locale (BCP47 [RFC5646] format)
}
const jwt = JWT.sign(jwtPayload, privateKey)
console.log(`1) You've just generated your first JWT:\n\n${jwt}\n\n  You can investigate its payload by copying it to https://jwt.io.\n`)

// Expose your public key in a easy to digest way.
const jwksResponse = {
  keys: [publicKey]
}
console.log(`2) You should implement a JWKS endpoint (e.g. GET https://your-api.example.com/jwks) returing the following response:\n${JSON.stringify(jwksResponse, null, 2)}\n\n`)
