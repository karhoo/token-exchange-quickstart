require 'jwt'
require 'securerandom'
require 'json'

def main()
  # Read your keys generated by openssl
  private_key = OpenSSL::PKey::RSA.new(File.read("../keys/private.pem"))
  public_key = OpenSSL::PKey::RSA.new(File.read("../keys/public.pem"))
  jwk = JWT::JWK.new(public_key).export()
  algorithm = 'RS256'

  # Create a sample JWT signed with your private key.
  token_payload = {
    jti: SecureRandom.uuid,                        # Unique token identifier
    aud: "https://sso.sandbox.karhoo.com/oauth/v2/token-exchange", # Audience
    iss: "your-app-id",             # Client ID the SDK was initialized with
    sub: "eccdfcf4b",               # The unique identifier of your user
    iat: Time.now.to_i,             # A timestamp when the token was issued
    exp: Time.now.to_i + 30*60,     # A timestamp when the token expires
    given_name: "John",             # First name
    family_name: "Doe",             # Last name
    email: "john.doe@example.com",  # Verified email
    phone_number: "+15005550006",   # Verified phone number in E.164 format
    locale: "en"   			            # End-User's locale (BCP47 [RFC5646] format)
  }
  token = JWT.encode token_payload, private_key, algorithm, { typ: 'JWT', kid: jwk[:kid] }

  puts "1) You've just generated your first JWT:\n\n#{token}\n\n  You can investigate its payload by copying it to https://jwt.io.\n\n"

  # Expose your public key in a easy to digest way.
  jwk[:alg] = algorithm
  jwks = { keys: [jwk] }

  puts "2) You should implement a JWKS endpoint (e.g. GET https://your-api.example.com/jwks) returing the following response:\n#{jwks.to_json}\n"
end

main()
