package com.karhoo.examples;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.jose4j.jwk.JsonWebKey;
import org.jose4j.jwk.RsaJsonWebKey;
import org.jose4j.jws.JsonWebSignature;
import org.jose4j.jwt.JwtClaims;
import org.jose4j.lang.JoseException;

import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static com.karhoo.examples.KeyUtils.readPrivateKey;
import static com.karhoo.examples.KeyUtils.readPublicKey;

public class TokenExchange {

  public static void main(String[] args) throws Exception {

      // Read your keys generated by openssl
      PublicKey publicKey = readPublicKey("../keys/public.der");
      PrivateKey privateKey = readPrivateKey("../keys/private.der");

      RsaJsonWebKey jwk = new RsaJsonWebKey((RSAPublicKey)publicKey);
      jwk.setPrivateKey(privateKey);
      jwk.setAlgorithm("RS256");
      jwk.setUse("sig");
      jwk.setKeyId("00001"); // Give your key set a consistent key identifier. This will help to rotate keys in future.

      // Create a sample JWT signed with your private key.
      String jwt = createJwt(jwk);
      System.out.println("1) You've just generated your first JWT:\n\n  " + jwt + "\n\n  You can investigate its payload by copying it to https://jwt.io.\n");

      // Expose your public key in a easy to digest way.
      Map<String, Object> jwksResponse = createJwksResponse(jwk);
      System.out.println("2) You should implement a JWKS endpoint (e.g. GET https://your-api.example.com/jwks) returing the following response:\n" + toJson(jwksResponse) + "\n\n");
  }

  private static String createJwt(RsaJsonWebKey jwk) throws JoseException {
      JwtClaims claims = new JwtClaims();
      claims.setGeneratedJwtId();
      claims.setIssuer("your-app-id");
      claims.setAudience("https://sso.sandbox.karhoo.com/oauth/v2/token-exchange");
      claims.setIssuedAtToNow();
      claims.setExpirationTimeMinutesInTheFuture(30);
      claims.setSubject("38922b8b-21f5-469a-9942-31a858830d82");
      claims.setClaim("given_name","John");
      claims.setClaim("family_name","Doe");
      claims.setClaim("email","john.doe@example.com");
      claims.setClaim("phone_number","+15005550006");
      claims.setClaim("locale","en");

      JsonWebSignature jws = new JsonWebSignature();
      jws.setPayload(claims.toJson());
      jws.setKeyIdHeaderValue(jwk.getKeyId());
      jws.setAlgorithmHeaderValue(jwk.getAlgorithm());
      jws.setKey(jwk.getPrivateKey());
      String jwt = jws.getCompactSerialization();

      return jwt;
  }

  private static Map<String, Object> createJwksResponse(RsaJsonWebKey jwk) {
      Map<String, Object> jwksResponse = new HashMap<>();
      jwksResponse.put("keys", Collections.singletonList(jwk.toParams(JsonWebKey.OutputControlLevel.PUBLIC_ONLY)));
      return jwksResponse;
  }

  private static String toJson(Object object) throws JsonProcessingException {
      return new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(object);
  }
}
