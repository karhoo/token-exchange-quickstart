from jose import jwt, jwk
import time
import uuid
import json
import hashlib

def main():
    # Read your keys generated by openssl
    private_key = open('../keys/private.pem', 'r').read()
    public_key = open('../keys/public.pem', 'r').read()
    key_id = hashlib.sha256(public_key.encode()).hexdigest()
    algorithm = 'RS256'

    # Create a sample JWT signed with your private key.
    token_payload = {
      'jti': str(uuid.uuid4()),         # Unique token identifier
      'aud': 'https://sso.sandbox.karhoo.com/oauth/v2/token-exchange', # Audience
      'iss': 'your-app-id',             # Client ID the SDK was initialized with
      'sub': "eccdfcf4b",               # The unique identifier of your user
      'iat': int(time.time()),          # A timestamp when the token was issued
      'exp': int(time.time()) + 30*60,  # A timestamp when the token expires
      'given_name': "John",             # First name
      'family_name': "Doe",             # Last name
      'email': "john.doe@example.com",  # Verified email
      'phone_number': "+15005550006",   # Verified phone number in E.164 format
      'locale': "en"   			        # End-User's locale (BCP47 [RFC5646] format)
    }
    token = jwt.encode(token_payload, private_key, algorithm = algorithm, headers = { 'kid': key_id })
    print(f"1) You've just generated your first JWT:\n\n{token}\n\n  You can investigate its payload by copying it to https://jwt.io.\n")

    # Expose your public key in a easy to digest way.
    json_web_key = jwk.construct(public_key, algorithm).to_dict()
    for key in ['n', 'e']: json_web_key[key] = str(json_web_key[key], 'utf-8')
    json_web_key['kid'] = key_id
    jwks = { 'keys': [json_web_key] }
    print(f"2) You should implement a JWKS endpoint (e.g. GET https://your-api.example.com/jwks) returing the following response:\n{json.dumps(jwks)}\n")

if __name__ == "__main__":
    # execute only if run as a script
    main()
